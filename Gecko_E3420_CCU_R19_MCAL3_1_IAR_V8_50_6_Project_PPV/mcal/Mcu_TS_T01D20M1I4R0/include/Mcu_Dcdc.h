/** *****************************************************************************************************
 * SEMIDRIVE Copyright Statement                                                                        *
 * Copyright (c) SEMIDRIVE. All rights reserved                                                         *
 *                                                                                                      *
 * This software and all rights therein are owned by SEMIDRIVE, and are                                 *
 * protected by copyright law and other relevant laws, regulations and                                  *
 * protection. Without SEMIDRIVE's prior written consent and/or related rights,                         *
 * please do not use this software or any potion thereof in any form or by any                          *
 * means. You may not reproduce, modify or distribute this software except in                           *
 * compliance with the License. Unless required by applicable law or agreed to                          *
 * in writing, software distributed under the License is distributed on                                 *
 * an 'AS IS' basis, WITHOUT WARRANTIES OF ANY KIND, either express or implied.                         *
 *                                                                                                      *
 *******************************************************************************************************/
/** *****************************************************************************************************
 *  \file     Mcu_Dcdc.h                                                                           *
 *  \brief    This file contains interface header for MCU MCAL driver, ...                             *
 *                                                                                                      *
 * <table>                                                                                              *
 * <tr><th>Date           <th>Version                                                                   *
 * <tr><td>2023/08/02     <td>1.0.0                               *
 * </table>                                                                                             *
 *******************************************************************************************************/

#ifndef MCU_DCDC_H
#define MCU_DCDC_H

#ifdef __cplusplus
extern "C" {
#endif
/********************************************************************************************************
 *                                      Include header files                                            *
 *******************************************************************************************************/
#include "Std_Types.h"
#include "Platform_Types.h"
/********************************************************************************************************
 *                                 Global Macro definition                                              *
 *******************************************************************************************************/
/* Generated by tool. Do not modify manually. */
/*DCDC REG DEFINE*/
#define DCDC_PSTAT_OFF  0x0U

#define BO_DCDC_PSTAT_DBG_OUT   (8U)

#define FM_DCDC_PSTAT_DBG_OUT   ((uint32)0xffU << 8U)
#define FV_DCDC_PSTAT_DBG_OUT(v) \
    (((uint32)(v) << 8U) & FM_DCDC_PSTAT_DBG_OUT)
#define GFV_DCDC_PSTAT_DBG_OUT(v) \
    (((uint32)(v) & FM_DCDC_PSTAT_DBG_OUT) >> 8U)

#define BO_DCDC_PSTAT_PGOODZ    (1U)

#define BM_DCDC_PSTAT_PGOODZ    ((uint32)0x01U << 1U)

#define BO_DCDC_PSTAT_PGOOD (0U)

#define BM_DCDC_PSTAT_PGOOD ((uint32)0x01U << 0U)

#define SELFTEST_MODE_OFF   0x4U

#define BO_SELFTEST_MODE_EN (0U)

#define BM_SELFTEST_MODE_EN ((uint32)0x01U << 0U)

#define REG_TRIM_SEL_OFF    0x8U

#define BO_REG_TRIM_SEL_VOUT_OFFSET (5U)

#define FM_REG_TRIM_SEL_VOUT_OFFSET ((uint32)0x7U << 5U)
#define FV_REG_TRIM_SEL_VOUT_OFFSET(v) \
    (((uint32)(v) << 5U) & FM_REG_TRIM_SEL_VOUT_OFFSET)
#define GFV_REG_TRIM_SEL_VOUT_OFFSET(v) \
    (((uint32)(v) & FM_REG_TRIM_SEL_VOUT_OFFSET) >> 5U)

#define BO_REG_TRIM_SEL_BG_OFFSET   (2U)

#define FM_REG_TRIM_SEL_BG_OFFSET   ((uint32)0x7U << 2U)
#define FV_REG_TRIM_SEL_BG_OFFSET(v) \
    (((uint32)(v) << 2U) & FM_REG_TRIM_SEL_BG_OFFSET)
#define GFV_REG_TRIM_SEL_BG_OFFSET(v) \
    (((uint32)(v) & FM_REG_TRIM_SEL_BG_OFFSET) >> 2U)

#define BO_REG_TRIM_SEL_VOUT_EN (1U)

#define BM_REG_TRIM_SEL_VOUT_EN ((uint32)0x01U << 1U)

#define BO_REG_TRIM_SEL_EN  (0U)

#define BM_REG_TRIM_SEL_EN  ((uint32)0x01U << 0U)

#define ANA_COM_CFG_OFF 0xcU

#define BO_ANA_COM_CFG_DCDC_REG_9   (24U)

#define FM_ANA_COM_CFG_DCDC_REG_9   ((uint32)0xffU << 24U)
#define FV_ANA_COM_CFG_DCDC_REG_9(v) \
    (((uint32)(v) << 24U) & FM_ANA_COM_CFG_DCDC_REG_9)
#define GFV_ANA_COM_CFG_DCDC_REG_9(v) \
    (((uint32)(v) & FM_ANA_COM_CFG_DCDC_REG_9) >> 24U)

#define BO_ANA_COM_CFG_DCDC_REG_0   (16U)

#define FM_ANA_COM_CFG_DCDC_REG_0   ((uint32)0xffU << 16U)
#define FV_ANA_COM_CFG_DCDC_REG_0(v) \
    (((uint32)(v) << 16U) & FM_ANA_COM_CFG_DCDC_REG_0)
#define GFV_ANA_COM_CFG_DCDC_REG_0(v) \
    (((uint32)(v) & FM_ANA_COM_CFG_DCDC_REG_0) >> 16U)

#define BO_ANA_COM_CFG_DCDC_REG_7   (8U)

#define FM_ANA_COM_CFG_DCDC_REG_7   ((uint32)0xffU << 8U)
#define FV_ANA_COM_CFG_DCDC_REG_7(v) \
    (((uint32)(v) << 8U) & FM_ANA_COM_CFG_DCDC_REG_7)
#define GFV_ANA_COM_CFG_DCDC_REG_7(v) \
    (((uint32)(v) & FM_ANA_COM_CFG_DCDC_REG_7) >> 8U)

#define BO_ANA_COM_CFG_DCDC_REG_8   (0U)

#define FM_ANA_COM_CFG_DCDC_REG_8   ((uint32)0xffU << 0U)
#define FV_ANA_COM_CFG_DCDC_REG_8(v) \
    (((uint32)(v) << 0U) & FM_ANA_COM_CFG_DCDC_REG_8)
#define GFV_ANA_COM_CFG_DCDC_REG_8(v) \
    (((uint32)(v) & FM_ANA_COM_CFG_DCDC_REG_8) >> 0U)

#define HP_MOD_CFG0_OFF 0x10U

#define BO_HP_MOD_CFG0_DCDC_REG_1   (16U)

#define FM_HP_MOD_CFG0_DCDC_REG_1   ((uint32)0xffU << 16U)
#define FV_HP_MOD_CFG0_DCDC_REG_1(v) \
    (((uint32)(v) << 16U) & FM_HP_MOD_CFG0_DCDC_REG_1)
#define GFV_HP_MOD_CFG0_DCDC_REG_1(v) \
    (((uint32)(v) & FM_HP_MOD_CFG0_DCDC_REG_1) >> 16U)

#define BO_HP_MOD_CFG0_DCDC_REG_2   (8U)

#define FM_HP_MOD_CFG0_DCDC_REG_2   ((uint32)0xffU << 8U)
#define FV_HP_MOD_CFG0_DCDC_REG_2(v) \
    (((uint32)(v) << 8U) & FM_HP_MOD_CFG0_DCDC_REG_2)
#define GFV_HP_MOD_CFG0_DCDC_REG_2(v) \
    (((uint32)(v) & FM_HP_MOD_CFG0_DCDC_REG_2) >> 8U)

#define BO_HP_MOD_CFG0_DCDC_REG_3   (0U)

#define FM_HP_MOD_CFG0_DCDC_REG_3   ((uint32)0xffU << 0U)
#define FV_HP_MOD_CFG0_DCDC_REG_3(v) \
    (((uint32)(v) << 0U) & FM_HP_MOD_CFG0_DCDC_REG_3)
#define GFV_HP_MOD_CFG0_DCDC_REG_3(v) \
    (((uint32)(v) & FM_HP_MOD_CFG0_DCDC_REG_3) >> 0U)

#define HP_MOD_CFG1_OFF 0x14U

#define BO_HP_MOD_CFG1_DCDC_REG_4   (16U)

#define FM_HP_MOD_CFG1_DCDC_REG_4   ((uint32)0xffU << 16U)
#define FV_HP_MOD_CFG1_DCDC_REG_4(v) \
    (((uint32)(v) << 16U) & FM_HP_MOD_CFG1_DCDC_REG_4)
#define GFV_HP_MOD_CFG1_DCDC_REG_4(v) \
    (((uint32)(v) & FM_HP_MOD_CFG1_DCDC_REG_4) >> 16U)

#define BO_HP_MOD_CFG1_DCDC_REG_5   (8U)

#define FM_HP_MOD_CFG1_DCDC_REG_5   ((uint32)0xffU << 8U)
#define FV_HP_MOD_CFG1_DCDC_REG_5(v) \
    (((uint32)(v) << 8U) & FM_HP_MOD_CFG1_DCDC_REG_5)
#define GFV_HP_MOD_CFG1_DCDC_REG_5(v) \
    (((uint32)(v) & FM_HP_MOD_CFG1_DCDC_REG_5) >> 8U)

#define BO_HP_MOD_CFG1_DCDC_REG_6   (0U)

#define FM_HP_MOD_CFG1_DCDC_REG_6   ((uint32)0xffU << 0U)
#define FV_HP_MOD_CFG1_DCDC_REG_6(v) \
    (((uint32)(v) << 0U) & FM_HP_MOD_CFG1_DCDC_REG_6)
#define GFV_HP_MOD_CFG1_DCDC_REG_6(v) \
    (((uint32)(v) & FM_HP_MOD_CFG1_DCDC_REG_6) >> 0U)

#define LP_MOD_CFG0_OFF 0x18U

#define BO_LP_MOD_CFG0_DCDC_REG_1   (16U)

#define FM_LP_MOD_CFG0_DCDC_REG_1   ((uint32)0xffU << 16U)
#define FV_LP_MOD_CFG0_DCDC_REG_1(v) \
    (((uint32)(v) << 16U) & FM_LP_MOD_CFG0_DCDC_REG_1)
#define GFV_LP_MOD_CFG0_DCDC_REG_1(v) \
    (((uint32)(v) & FM_LP_MOD_CFG0_DCDC_REG_1) >> 16U)

#define BO_LP_MOD_CFG0_DCDC_REG_2   (8U)

#define FM_LP_MOD_CFG0_DCDC_REG_2   ((uint32)0xffU << 8U)
#define FV_LP_MOD_CFG0_DCDC_REG_2(v) \
    (((uint32)(v) << 8U) & FM_LP_MOD_CFG0_DCDC_REG_2)
#define GFV_LP_MOD_CFG0_DCDC_REG_2(v) \
    (((uint32)(v) & FM_LP_MOD_CFG0_DCDC_REG_2) >> 8U)

#define BO_LP_MOD_CFG0_DCDC_REG_3   (0U)

#define FM_LP_MOD_CFG0_DCDC_REG_3   ((uint32)0xffU << 0U)
#define FV_LP_MOD_CFG0_DCDC_REG_3(v) \
    (((uint32)(v) << 0U) & FM_LP_MOD_CFG0_DCDC_REG_3)
#define GFV_LP_MOD_CFG0_DCDC_REG_3(v) \
    (((uint32)(v) & FM_LP_MOD_CFG0_DCDC_REG_3) >> 0U)

#define LP_MOD_CFG1_OFF 0x1cU

#define BO_LP_MOD_CFG1_DCDC_REG_4   (16U)

#define FM_LP_MOD_CFG1_DCDC_REG_4   ((uint32)0xffU << 16U)
#define FV_LP_MOD_CFG1_DCDC_REG_4(v) \
    (((uint32)(v) << 16U) & FM_LP_MOD_CFG1_DCDC_REG_4)
#define GFV_LP_MOD_CFG1_DCDC_REG_4(v) \
    (((uint32)(v) & FM_LP_MOD_CFG1_DCDC_REG_4) >> 16U)

#define BO_LP_MOD_CFG1_DCDC_REG_5   (8U)

#define FM_LP_MOD_CFG1_DCDC_REG_5   ((uint32)0xffU << 8U)
#define FV_LP_MOD_CFG1_DCDC_REG_5(v) \
    (((uint32)(v) << 8U) & FM_LP_MOD_CFG1_DCDC_REG_5)
#define GFV_LP_MOD_CFG1_DCDC_REG_5(v) \
    (((uint32)(v) & FM_LP_MOD_CFG1_DCDC_REG_5) >> 8U)

#define BO_LP_MOD_CFG1_DCDC_REG_6   (0U)

#define FM_LP_MOD_CFG1_DCDC_REG_6   ((uint32)0xffU << 0U)
#define FV_LP_MOD_CFG1_DCDC_REG_6(v) \
    (((uint32)(v) << 0U) & FM_LP_MOD_CFG1_DCDC_REG_6)
#define GFV_LP_MOD_CFG1_DCDC_REG_6(v) \
    (((uint32)(v) & FM_LP_MOD_CFG1_DCDC_REG_6) >> 0U)

#define CLK_MONT_CFG_H_OFF  0x20U

#define BO_CLK_MONT_CFG_H_UNST_THRE (0U)

#define FM_CLK_MONT_CFG_H_UNST_THRE ((uint32)0xffffU << 0U)
#define FV_CLK_MONT_CFG_H_UNST_THRE(v) \
    (((uint32)(v) << 0U) & FM_CLK_MONT_CFG_H_UNST_THRE)
#define GFV_CLK_MONT_CFG_H_UNST_THRE(v) \
    (((uint32)(v) & FM_CLK_MONT_CFG_H_UNST_THRE) >> 0U)

#define CLK_MONT_CFG_L_OFF  0x24U

#define BO_CLK_MONT_CFG_L_UNST_THRE (0U)

#define FM_CLK_MONT_CFG_L_UNST_THRE ((uint32)0xffffU << 0U)
#define FV_CLK_MONT_CFG_L_UNST_THRE(v) \
    (((uint32)(v) << 0U) & FM_CLK_MONT_CFG_L_UNST_THRE)
#define GFV_CLK_MONT_CFG_L_UNST_THRE(v) \
    (((uint32)(v) & FM_CLK_MONT_CFG_L_UNST_THRE) >> 0U)

#define XTAL_MONT_CTRL_OFF  0x28U

#define BO_XTAL_MONT_CTRL_XTAL_NG   (1U)

#define BM_XTAL_MONT_CTRL_XTAL_NG   ((uint32)0x01U << 1U)

#define BO_XTAL_MONT_CTRL_MONT_EN   (0U)

#define BM_XTAL_MONT_CTRL_MONT_EN   ((uint32)0x01U << 0U)

#define CLK_TEST_OFF    0x2cU

#define BO_CLK_TEST_XTAL_GAT    (0U)

#define BM_CLK_TEST_XTAL_GAT    ((uint32)0x01U << 0U)

#define FUNC_STAT_OFF   0x30U

#define BO_FUNC_STAT_OV_ERR (10U)

#define BM_FUNC_STAT_OV_ERR ((uint32)0x01U << 10U)

#define BO_FUNC_STAT_OV_WARN    (9U)

#define BM_FUNC_STAT_OV_WARN    ((uint32)0x01U << 9U)

#define BO_FUNC_STAT_UV_ERR (8U)

#define BM_FUNC_STAT_UV_ERR ((uint32)0x01U << 8U)

#define BO_FUNC_STAT_UV_WARN    (7U)

#define BM_FUNC_STAT_UV_WARN    ((uint32)0x01U << 7U)

#define BO_FUNC_STAT_OC_ERR (6U)

#define BM_FUNC_STAT_OC_ERR ((uint32)0x01U << 6U)

#define BO_FUNC_STAT_PSP_ERR    (5U)

#define BM_FUNC_STAT_PSP_ERR    ((uint32)0x01U << 5U)

#define BO_FUNC_STAT_NSP_ERR    (4U)

#define BM_FUNC_STAT_NSP_ERR    ((uint32)0x01U << 4U)

#define BO_FUNC_STAT_START_ERR  (3U)

#define BM_FUNC_STAT_START_ERR  ((uint32)0x01U << 3U)

#define BO_FUNC_STAT_VDC_ERR    (2U)

#define BM_FUNC_STAT_VDC_ERR    ((uint32)0x01U << 2U)

#define BO_FUNC_STAT_VAC_ERR    (1U)

#define BM_FUNC_STAT_VAC_ERR    ((uint32)0x01U << 1U)

#define BO_FUNC_STAT_IDDQ_ERR   (0U)

#define BM_FUNC_STAT_IDDQ_ERR   ((uint32)0x01U << 0U)

#define FUNC_STAT_EN_OFF    0x34U

#define BO_FUNC_STAT_EN_OV_ERR  (10U)

#define BM_FUNC_STAT_EN_OV_ERR  ((uint32)0x01U << 10U)

#define BO_FUNC_STAT_EN_OV_WARN (9U)

#define BM_FUNC_STAT_EN_OV_WARN ((uint32)0x01U << 9U)

#define BO_FUNC_STAT_EN_UV_ERR  (8U)

#define BM_FUNC_STAT_EN_UV_ERR  ((uint32)0x01U << 8U)

#define BO_FUNC_STAT_EN_UV_WARN (7U)

#define BM_FUNC_STAT_EN_UV_WARN ((uint32)0x01U << 7U)

#define BO_FUNC_STAT_EN_OC_ERR  (6U)

#define BM_FUNC_STAT_EN_OC_ERR  ((uint32)0x01U << 6U)

#define BO_FUNC_STAT_EN_PSP_ERR (5U)

#define BM_FUNC_STAT_EN_PSP_ERR ((uint32)0x01U << 5U)

#define BO_FUNC_STAT_EN_NSP_ERR (4U)

#define BM_FUNC_STAT_EN_NSP_ERR ((uint32)0x01U << 4U)

#define BO_FUNC_STAT_EN_START_ERR   (3U)

#define BM_FUNC_STAT_EN_START_ERR   ((uint32)0x01U << 3U)

#define BO_FUNC_STAT_EN_VDC_ERR (2U)

#define BM_FUNC_STAT_EN_VDC_ERR ((uint32)0x01U << 2U)

#define BO_FUNC_STAT_EN_VAC_ERR (1U)

#define BM_FUNC_STAT_EN_VAC_ERR ((uint32)0x01U << 1U)

#define BO_FUNC_STAT_EN_IDDQ_ERR    (0U)

#define BM_FUNC_STAT_EN_IDDQ_ERR    ((uint32)0x01U << 0U)

#define FUNC_STAT_CLR_OFF   0x38U

#define BO_FUNC_STAT_CLR_OV_ERR (10U)

#define BM_FUNC_STAT_CLR_OV_ERR ((uint32)0x01U << 10U)

#define BO_FUNC_STAT_CLR_OV_WARN    (9U)

#define BM_FUNC_STAT_CLR_OV_WARN    ((uint32)0x01U << 9U)

#define BO_FUNC_STAT_CLR_UV_ERR (8U)

#define BM_FUNC_STAT_CLR_UV_ERR ((uint32)0x01U << 8U)

#define BO_FUNC_STAT_CLR_UV_WARN    (7U)

#define BM_FUNC_STAT_CLR_UV_WARN    ((uint32)0x01U << 7U)

#define BO_FUNC_STAT_CLR_OC_ERR (6U)

#define BM_FUNC_STAT_CLR_OC_ERR ((uint32)0x01U << 6U)

#define BO_FUNC_STAT_CLR_PSP_ERR    (5U)

#define BM_FUNC_STAT_CLR_PSP_ERR    ((uint32)0x01U << 5U)

#define BO_FUNC_STAT_CLR_NSP_ERR    (4U)

#define BM_FUNC_STAT_CLR_NSP_ERR    ((uint32)0x01U << 4U)

#define BO_FUNC_STAT_CLR_START_ERR  (3U)

#define BM_FUNC_STAT_CLR_START_ERR  ((uint32)0x01U << 3U)

#define BO_FUNC_STAT_CLR_VDC_ERR    (2U)

#define BM_FUNC_STAT_CLR_VDC_ERR    ((uint32)0x01U << 2U)

#define BO_FUNC_STAT_CLR_VAC_ERR    (1U)

#define BM_FUNC_STAT_CLR_VAC_ERR    ((uint32)0x01U << 1U)

#define BO_FUNC_STAT_CLR_IDDQ_ERR   (0U)

#define BM_FUNC_STAT_CLR_IDDQ_ERR   ((uint32)0x01U << 0U)

#define FUNC_INT_SIG_EN_OFF 0x3cU

#define BO_FUNC_INT_SIG_EN_OV_ERR   (10U)

#define BM_FUNC_INT_SIG_EN_OV_ERR   ((uint32)0x01U << 10U)

#define BO_FUNC_INT_SIG_EN_OV_WARN  (9U)

#define BM_FUNC_INT_SIG_EN_OV_WARN  ((uint32)0x01U << 9U)

#define BO_FUNC_INT_SIG_EN_UV_ERR   (8U)

#define BM_FUNC_INT_SIG_EN_UV_ERR   ((uint32)0x01U << 8U)

#define BO_FUNC_INT_SIG_EN_UV_WARN  (7U)

#define BM_FUNC_INT_SIG_EN_UV_WARN  ((uint32)0x01U << 7U)

#define BO_FUNC_INT_SIG_EN_OC_ERR   (6U)

#define BM_FUNC_INT_SIG_EN_OC_ERR   ((uint32)0x01U << 6U)

#define BO_FUNC_INT_SIG_EN_PSP_ERR  (5U)

#define BM_FUNC_INT_SIG_EN_PSP_ERR  ((uint32)0x01U << 5U)

#define BO_FUNC_INT_SIG_EN_NSP_ERR  (4U)

#define BM_FUNC_INT_SIG_EN_NSP_ERR  ((uint32)0x01U << 4U)

#define BO_FUNC_INT_SIG_EN_START_ERR    (3U)

#define BM_FUNC_INT_SIG_EN_START_ERR    ((uint32)0x01U << 3U)

#define BO_FUNC_INT_SIG_EN_VDC_ERR  (2U)

#define BM_FUNC_INT_SIG_EN_VDC_ERR  ((uint32)0x01U << 2U)

#define BO_FUNC_INT_SIG_EN_VAC_ERR  (1U)

#define BM_FUNC_INT_SIG_EN_VAC_ERR  ((uint32)0x01U << 1U)

#define BO_FUNC_INT_SIG_EN_IDDQ_ERR (0U)

#define BM_FUNC_INT_SIG_EN_IDDQ_ERR ((uint32)0x01U << 0U)

#define FUNC_COR_SIG_EN_OFF 0x40U

#define BO_FUNC_COR_SIG_EN_OV_ERR   (10U)

#define BM_FUNC_COR_SIG_EN_OV_ERR   ((uint32)0x01U << 10U)

#define BO_FUNC_COR_SIG_EN_OV_WARN  (9U)

#define BM_FUNC_COR_SIG_EN_OV_WARN  ((uint32)0x01U << 9U)

#define BO_FUNC_COR_SIG_EN_UV_ERR   (8U)

#define BM_FUNC_COR_SIG_EN_UV_ERR   ((uint32)0x01U << 8U)

#define BO_FUNC_COR_SIG_EN_UV_WARN  (7U)

#define BM_FUNC_COR_SIG_EN_UV_WARN  ((uint32)0x01U << 7U)

#define BO_FUNC_COR_SIG_EN_OC_ERR   (6U)

#define BM_FUNC_COR_SIG_EN_OC_ERR   ((uint32)0x01U << 6U)

#define BO_FUNC_COR_SIG_EN_PSP_ERR  (5U)

#define BM_FUNC_COR_SIG_EN_PSP_ERR  ((uint32)0x01U << 5U)

#define BO_FUNC_COR_SIG_EN_NSP_ERR  (4U)

#define BM_FUNC_COR_SIG_EN_NSP_ERR  ((uint32)0x01U << 4U)

#define BO_FUNC_COR_SIG_EN_START_ERR    (3U)

#define BM_FUNC_COR_SIG_EN_START_ERR    ((uint32)0x01U << 3U)

#define BO_FUNC_COR_SIG_EN_VDC_ERR  (2U)

#define BM_FUNC_COR_SIG_EN_VDC_ERR  ((uint32)0x01U << 2U)

#define BO_FUNC_COR_SIG_EN_VAC_ERR  (1U)

#define BM_FUNC_COR_SIG_EN_VAC_ERR  ((uint32)0x01U << 1U)

#define BO_FUNC_COR_SIG_EN_IDDQ_ERR (0U)

#define BM_FUNC_COR_SIG_EN_IDDQ_ERR ((uint32)0x01U << 0U)

#define FUNC_UNC_SIG_EN_OFF 0x44U

#define BO_FUNC_UNC_SIG_EN_OV_ERR   (10U)

#define BM_FUNC_UNC_SIG_EN_OV_ERR   ((uint32)0x01U << 10U)

#define BO_FUNC_UNC_SIG_EN_OV_WARN  (9U)

#define BM_FUNC_UNC_SIG_EN_OV_WARN  ((uint32)0x01U << 9U)

#define BO_FUNC_UNC_SIG_EN_UV_ERR   (8U)

#define BM_FUNC_UNC_SIG_EN_UV_ERR   ((uint32)0x01U << 8U)

#define BO_FUNC_UNC_SIG_EN_UV_WARN  (7U)

#define BM_FUNC_UNC_SIG_EN_UV_WARN  ((uint32)0x01U << 7U)

#define BO_FUNC_UNC_SIG_EN_OC_ERR   (6U)

#define BM_FUNC_UNC_SIG_EN_OC_ERR   ((uint32)0x01U << 6U)

#define BO_FUNC_UNC_SIG_EN_PSP_ERR  (5U)

#define BM_FUNC_UNC_SIG_EN_PSP_ERR  ((uint32)0x01U << 5U)

#define BO_FUNC_UNC_SIG_EN_NSP_ERR  (4U)

#define BM_FUNC_UNC_SIG_EN_NSP_ERR  ((uint32)0x01U << 4U)

#define BO_FUNC_UNC_SIG_EN_START_ERR    (3U)

#define BM_FUNC_UNC_SIG_EN_START_ERR    ((uint32)0x01U << 3U)

#define BO_FUNC_UNC_SIG_EN_VDC_ERR  (2U)

#define BM_FUNC_UNC_SIG_EN_VDC_ERR  ((uint32)0x01U << 2U)

#define BO_FUNC_UNC_SIG_EN_VAC_ERR  (1U)

#define BM_FUNC_UNC_SIG_EN_VAC_ERR  ((uint32)0x01U << 1U)

#define BO_FUNC_UNC_SIG_EN_IDDQ_ERR (0U)

#define BM_FUNC_UNC_SIG_EN_IDDQ_ERR ((uint32)0x01U << 0U)

#define FUNC_DY_STAT_OFF    0x48U

#define BO_FUNC_DY_STAT_OV_ERR  (10U)

#define BM_FUNC_DY_STAT_OV_ERR  ((uint32)0x01U << 10U)

#define BO_FUNC_DY_STAT_OV_WARN (9U)

#define BM_FUNC_DY_STAT_OV_WARN ((uint32)0x01U << 9U)

#define BO_FUNC_DY_STAT_UV_ERR  (8U)

#define BM_FUNC_DY_STAT_UV_ERR  ((uint32)0x01U << 8U)

#define BO_FUNC_DY_STAT_UV_WARN (7U)

#define BM_FUNC_DY_STAT_UV_WARN ((uint32)0x01U << 7U)

#define BO_FUNC_DY_STAT_OC_ERR  (6U)

#define BM_FUNC_DY_STAT_OC_ERR  ((uint32)0x01U << 6U)

#define BO_FUNC_DY_STAT_PSP_ERR (5U)

#define BM_FUNC_DY_STAT_PSP_ERR ((uint32)0x01U << 5U)

#define BO_FUNC_DY_STAT_NSP_ERR (4U)

#define BM_FUNC_DY_STAT_NSP_ERR ((uint32)0x01U << 4U)

#define BO_FUNC_DY_STAT_START_ERR   (3U)

#define BM_FUNC_DY_STAT_START_ERR   ((uint32)0x01U << 3U)

#define BO_FUNC_DY_STAT_VDC_ERR (2U)

#define BM_FUNC_DY_STAT_VDC_ERR ((uint32)0x01U << 2U)

#define BO_FUNC_DY_STAT_VAC_ERR (1U)

#define BM_FUNC_DY_STAT_VAC_ERR ((uint32)0x01U << 1U)

#define BO_FUNC_DY_STAT_IDDQ_ERR    (0U)

#define BM_FUNC_DY_STAT_IDDQ_ERR    ((uint32)0x01U << 0U)

#define INPUT_CHK_STAT_OFF  0x4cU

#define BO_INPUT_CHK_STAT_INPUT_ERR (0U)

#define BM_INPUT_CHK_STAT_INPUT_ERR ((uint32)0x01U << 0U)

#define INPUT_CHK_STAT_EN_OFF   0x50U

#define BO_INPUT_CHK_STAT_EN_INPUT_ERR  (0U)

#define BM_INPUT_CHK_STAT_EN_INPUT_ERR  ((uint32)0x01U << 0U)

#define INPUT_CHK_INT_SIG_EN_OFF    0x54U

#define BO_INPUT_CHK_INT_SIG_EN_INPUT_ERR   (0U)

#define BM_INPUT_CHK_INT_SIG_EN_INPUT_ERR   ((uint32)0x01U << 0U)

#define CLK_CHK_STAT_OFF    0x58U

#define BO_CLK_CHK_STAT_CLK_LOST    (1U)

#define BM_CLK_CHK_STAT_CLK_LOST    ((uint32)0x01U << 1U)

#define BO_CLK_CHK_STAT_CLK_UNST    (0U)

#define BM_CLK_CHK_STAT_CLK_UNST    ((uint32)0x01U << 0U)

#define CLK_CHK_STAT_EN_OFF 0x5cU

#define BO_CLK_CHK_STAT_EN_CLK_UNST (0U)

#define BM_CLK_CHK_STAT_EN_CLK_UNST ((uint32)0x01U << 0U)

#define CLK_CHK_INT_SIG_EN_OFF  0x60U

#define BO_CLK_CHK_INT_SIG_EN_CLK_UNST  (0U)

#define BM_CLK_CHK_INT_SIG_EN_CLK_UNST  ((uint32)0x01U << 0U)

#define CLK_CHK_STAT_CLR_OFF    0x64U

#define BO_CLK_CHK_STAT_CLR_CLK_UNST    (0U)

#define BM_CLK_CHK_STAT_CLR_CLK_UNST    ((uint32)0x01U << 0U)

#define COR_ERR_INT_STAT_OFF    0x68U

#define BO_COR_ERR_INT_STAT_PWDATA_COR_ERR  (0U)

#define BM_COR_ERR_INT_STAT_PWDATA_COR_ERR  ((uint32)0x01U << 0U)

#define COR_ERR_INT_STAT_EN_OFF 0x6cU

#define BO_COR_ERR_INT_STAT_EN_PWDATA_COR_ERR   (0U)

#define BM_COR_ERR_INT_STAT_EN_PWDATA_COR_ERR   ((uint32)0x01U << 0U)

#define COR_ERR_INT_SIG_EN_OFF  0x70U

#define BO_COR_ERR_INT_SIG_EN_PWDATA_COR_ERR    (0U)

#define BM_COR_ERR_INT_SIG_EN_PWDATA_COR_ERR    ((uint32)0x01U << 0U)

#define UNC_ERR_INT_STAT_OFF    0x74U

#define BO_UNC_ERR_INT_STAT_REG_PARITY_EJ_ERR   (5U)

#define BM_UNC_ERR_INT_STAT_REG_PARITY_EJ_ERR   ((uint32)0x01U << 5U)

#define BO_UNC_ERR_INT_STAT_SELFTEST_MODE_ERR   (4U)

#define BM_UNC_ERR_INT_STAT_SELFTEST_MODE_ERR   ((uint32)0x01U << 4U)

#define BO_UNC_ERR_INT_STAT_PCTL_UNC_ERR    (3U)

#define BM_UNC_ERR_INT_STAT_PCTL_UNC_ERR    ((uint32)0x01U << 3U)

#define BO_UNC_ERR_INT_STAT_PADDR_UNC_ERR   (2U)

#define BM_UNC_ERR_INT_STAT_PADDR_UNC_ERR   ((uint32)0x01U << 2U)

#define BO_UNC_ERR_INT_STAT_PWDATA_FATAL_ERR    (1U)

#define BM_UNC_ERR_INT_STAT_PWDATA_FATAL_ERR    ((uint32)0x01U << 1U)

#define BO_UNC_ERR_INT_STAT_PWDATA_UNC_ERR  (0U)

#define BM_UNC_ERR_INT_STAT_PWDATA_UNC_ERR  ((uint32)0x01U << 0U)

#define UNC_ERR_INT_STAT_EN_OFF 0x78U

#define BO_UNC_ERR_INT_STAT_EN_REG_PARITY_EJ_ERR    (5U)

#define BM_UNC_ERR_INT_STAT_EN_REG_PARITY_EJ_ERR    ((uint32)0x01U << 5U)

#define BO_UNC_ERR_INT_STAT_EN_SELFTEST_MODE_ERR    (4U)

#define BM_UNC_ERR_INT_STAT_EN_SELFTEST_MODE_ERR    ((uint32)0x01U << 4U)

#define BO_UNC_ERR_INT_STAT_EN_PCTL_UNC_ERR (3U)

#define BM_UNC_ERR_INT_STAT_EN_PCTL_UNC_ERR ((uint32)0x01U << 3U)

#define BO_UNC_ERR_INT_STAT_EN_PADDR_UNC_ERR    (2U)

#define BM_UNC_ERR_INT_STAT_EN_PADDR_UNC_ERR    ((uint32)0x01U << 2U)

#define BO_UNC_ERR_INT_STAT_EN_PWDATA_FATAL_ERR (1U)

#define BM_UNC_ERR_INT_STAT_EN_PWDATA_FATAL_ERR ((uint32)0x01U << 1U)

#define BO_UNC_ERR_INT_STAT_EN_PWDATA_UNC_ERR   (0U)

#define BM_UNC_ERR_INT_STAT_EN_PWDATA_UNC_ERR   ((uint32)0x01U << 0U)

#define UNC_ERR_INT_SIG_EN_OFF  0x7cU

#define BO_UNC_ERR_INT_SIG_EN_REG_PARITY_EJ_ERR (5U)

#define BM_UNC_ERR_INT_SIG_EN_REG_PARITY_EJ_ERR ((uint32)0x01U << 5U)

#define BO_UNC_ERR_INT_SIG_EN_SELFTEST_MODE_ERR (4U)

#define BM_UNC_ERR_INT_SIG_EN_SELFTEST_MODE_ERR ((uint32)0x01U << 4U)

#define BO_UNC_ERR_INT_SIG_EN_PCTL_UNC_ERR  (3U)

#define BM_UNC_ERR_INT_SIG_EN_PCTL_UNC_ERR  ((uint32)0x01U << 3U)

#define BO_UNC_ERR_INT_SIG_EN_PADDR_UNC_ERR (2U)

#define BM_UNC_ERR_INT_SIG_EN_PADDR_UNC_ERR ((uint32)0x01U << 2U)

#define BO_UNC_ERR_INT_SIG_EN_PWDATA_FATAL_ERR  (1U)

#define BM_UNC_ERR_INT_SIG_EN_PWDATA_FATAL_ERR  ((uint32)0x01U << 1U)

#define BO_UNC_ERR_INT_SIG_EN_PWDATA_UNC_ERR    (0U)

#define BM_UNC_ERR_INT_SIG_EN_PWDATA_UNC_ERR    ((uint32)0x01U << 0U)

#define REG_PARITY_ERR_INT_STAT_OFF 0x80U

#define BO_REG_PARITY_ERR_INT_STAT_REG_PARITY_ERR   (0U)

#define BM_REG_PARITY_ERR_INT_STAT_REG_PARITY_ERR   ((uint32)0x01U << 0U)

#define REG_PARITY_ERR_INT_STAT_EN_OFF  0x84U

#define BO_REG_PARITY_ERR_INT_STAT_EN_REG_PARITY_ERR    (0U)

#define BM_REG_PARITY_ERR_INT_STAT_EN_REG_PARITY_ERR    ((uint32)0x01U << 0U)

#define REG_PARITY_ERR_INT_SIG_EN_OFF   0x88U

#define BO_REG_PARITY_ERR_INT_SIG_EN_REG_PARITY_ERR (0U)

#define BM_REG_PARITY_ERR_INT_SIG_EN_REG_PARITY_ERR ((uint32)0x01U << 0U)

#define PRDATAINJ_OFF   0x8cU

#define BO_PRDATAINJ_ERR_INJ    (0U)

#define BM_PRDATAINJ_ERR_INJ    ((uint32)0x01U << 0U)

#define PWDATA_INJ_OFF  0x90U

#define BO_PWDATA_INJ_DATA_INJ  (0U)

#define FM_PWDATA_INJ_DATA_INJ  ((uint32)0xffffffffU << 0U)
#define FV_PWDATA_INJ_DATA_INJ(v) \
    (((uint32)(v) << 0U) & FM_PWDATA_INJ_DATA_INJ)
#define GFV_PWDATA_INJ_DATA_INJ(v) \
    (((uint32)(v) & FM_PWDATA_INJ_DATA_INJ) >> 0U)

#define PWECC_INJ_OFF   0x94U

#define BO_PWECC_INJ_ECC_INJ    (0U)

#define FM_PWECC_INJ_ECC_INJ    ((uint32)0x7fU << 0U)
#define FV_PWECC_INJ_ECC_INJ(v) \
    (((uint32)(v) << 0U) & FM_PWECC_INJ_ECC_INJ)
#define GFV_PWECC_INJ_ECC_INJ(v) \
    (((uint32)(v) & FM_PWECC_INJ_ECC_INJ) >> 0U)

#define INT_ERR_INJ_OFF 0x98U

#define BO_INT_ERR_INJ_UNC_ERR  (2U)

#define BM_INT_ERR_INJ_UNC_ERR  ((uint32)0x01U << 2U)

#define BO_INT_ERR_INJ_COR_ERR  (1U)

#define BM_INT_ERR_INJ_COR_ERR  ((uint32)0x01U << 1U)

#define BO_INT_ERR_INJ_FUNC_ERR (0U)

#define BM_INT_ERR_INJ_FUNC_ERR ((uint32)0x01U << 0U)

#define REG_CLK_FRE_OFF 0x9cU

#define BO_REG_CLK_FRE_EN   (0U)

#define BM_REG_CLK_FRE_EN   ((uint32)0x01U << 0U)

/********************************************************************************************************
 *                                  Global Types definition                                             *
 *******************************************************************************************************/
/*dcdc over current threshold */
typedef enum
{
    DCDC_OC_DETECT_THRESHOLD_1500_MA = 0x00,
    DCDC_OC_DETECT_THRESHOLD_2100_MA,
    DCDC_OC_DETECT_THRESHOLD_2700_MA,
    DCDC_OC_DETECT_THRESHOLD_3300_MA,
} Dcdc_OcDetectThresholdType;

/*dcdc under voltage threshold */
typedef enum
{
    DCDC_UV_DETECT_THRESHOLD_80_PERCENT = 0x00,
    DCDC_UV_DETECT_THRESHOLD_90_PERCENT,
    DCDC_UV_DETECT_THRESHOLD_100_PERCENT,
    DCDC_UV_DETECT_THRESHOLD_110_PERCENT,
} Dcdc_UvDetectThresholdType;

/*dcdc over voltage threshold */
typedef enum
{
    DCDC_OV_DETECT_THRESHOLD_120_PERCENT = 0x00,
    DCDC_OV_DETECT_THRESHOLD_110_PERCENT,
    DCDC_OV_DETECT_THRESHOLD_100_PERCENT,
    DCDC_OV_DETECT_THRESHOLD_90_PERCENT,
} Dcdc_OvDetectThresholdType;

/*dcdc ov uv init config type */
typedef struct
{
    /*set dcdc vout*/
    uint32 vout;
    /*set oc threshold*/
    Dcdc_OcDetectThresholdType ocDetectThreshold;
    /*set uv threshold*/
    Dcdc_UvDetectThresholdType uvDetectThreshold;
    /*set ov threshold*/
    Dcdc_OvDetectThresholdType ovDetectThreshold;
    /*set interrupt enable*/
    boolean intEn;
    /*set interrupt value*/
    uint32 intVal;
} Dcdc_OvUvCfgType;

/********************************************************************************************************
 *                                  Global Function Declarations                                        *
 *******************************************************************************************************/
Std_ReturnType Mcu_Ip_DcdcSetVout(uint32 mv);
Std_ReturnType Mcu_Ip_DcdcFaultDetect(const Dcdc_OvUvCfgType *dcdcCfgPtr);

void Mcu_Ip_DcdcModeSet(void);

#ifdef __cplusplus
}
#endif

#endif /* MCU_DCDC_H */
/* End of file */
